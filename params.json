{"name":"Typed JSON","tagline":"Format for defining structured JSON data","body":"# Typed JSON\r\n\r\nTyped JSON is a format for defining structured [JSON][] data, that\r\ncan be used by language type systems or contract / guard librarires\r\nto do some type safety guarantees.\r\n\r\n## Format\r\n\r\nEvery type is associtade with a unique URI. While it's recommended to have\r\ntype definition under that URI it's not a requirement, but rather a unique\r\nidentifier for the given type. All primitive types are also associated with\r\na specific URIs. This specification definese set of following primitive types:\r\n\r\n### null\r\n\r\nPrimitive type representing absense of value. It can be aliased in a local\r\ntypegraph file as follows:\r\n\r\n\r\n```json\r\n{\r\n  \"null\": \"http://typed-json.org/#null\"\r\n}\r\n```\r\n\r\n*Note: `\"null\"` is just an identifier that will be used to refer to `null`\r\ntype in the rest of the graph, but any different identifier would work just\r\nfine*\r\n\r\n\r\nSince `null` is valid JSON primitive it can be referenced in type definitions\r\nas `null` which will be equivalent of `http://typed-json.org/#null`.\r\n\r\n\r\n### boolean\r\n\r\nBoolean type that can be either `true` or `false`. Booleans can be aliased in\r\na local typegraph file as:\r\n\r\n```json\r\n{\r\n  \"bool\": \"http://typed-json.org/#boolean\"\r\n}\r\n```\r\n\r\n\r\n### integer\r\n\r\n```json\r\n{\r\n  \"int\": \"http://typed-json.org/#integer\"\r\n}\r\n```\r\n\r\n### float\r\n\r\n```json\r\n{\r\n  \"float\": \"http://typed-json.org/#float\"\r\n}\r\n```\r\n\r\n### string\r\n\r\n```json\r\n{\r\n  \"string\": \"http://typed-json.org/#string\"\r\n}\r\n```\r\n\r\n## Composite types\r\n\r\nMain use of typograph is for defining composite type structures. There are\r\nfew type structures that can be expressed:\r\n\r\n### Records\r\n\r\nRecord types represent JSON objects with a specific structure. They are defined\r\nby providing signiture of it's fields:\r\n\r\n\r\n```json\r\n{\r\n  \"point\": {\r\n    \"x\": \"http://typed-json.org/#integer\",\r\n    \"y\": \"http://typed-json.org/#integer\"\r\n  }\r\n}\r\n```\r\n\r\nAbove typograph defines `point` type that **Must** have `x` and `y` fields\r\nwith an integer values. In this example actual integer type identifiers were\r\nused, but same could have being expressed by aliasing integer type:\r\n\r\n\r\n```json\r\n{\r\n  \"int\": \"http://typed-json.org/#integer\",\r\n  \"point\": { \"x\": \"int\", \"y\": \"int\" }\r\n}\r\n```\r\n\r\nMore complex structures could be defined by reusing types defined earlier:\r\n\r\n```json\r\n{\r\n  \"int\": \"http://typed-json.org/#integer\",\r\n  \"point\": { \"x\": \"int\", \"y\": \"int\" },\r\n  \"line\": {\r\n    \"color\": \"string\",\r\n    \"start\": \"point\",\r\n    \"end\": \"point\"\r\n  }\r\n}\r\n```\r\n\r\n### Collections\r\n\r\nCollections like arrays (different languages could use different collection\r\ntypes like lists for example) are expressed as follows:\r\n\r\n```json\r\n{\r\n  \"int\": \"http://typed-json.org/#integer\",\r\n  \"graph\": [\"int\"]\r\n}\r\n```\r\n\r\nComposite types can be used to compose new collection types:\r\n\r\n\r\n```json\r\n{\r\n  \"int\": \"http://typed-json.org/#integer\",\r\n  \"point\": { \"x\": \"int\", \"y\": \"int\" },\r\n  \"shape\": [\"point\"]\r\n}\r\n```\r\n\r\n### Tuples\r\n\r\nTuples are just a records with indexed fields that are represented\r\nvia arrays in JSON. They can be defined as follows:\r\n\r\n```json\r\n{\r\n  \"int\": \"http://typed-json.org/#integer\",\r\n  \"point\": { \"x\": \"int\", \"y\": \"int\" },\r\n  \"line\": { \"0\": \"point\", \"1\": \"point\" }\r\n}\r\n```\r\n\r\nAbove defined `line` type defines structure for values like:\r\n\r\n```js\r\n[{x: 0, y: 0}, {x:0, y: 10}]\r\n```\r\n\r\nTupeles can also hold different types of values:\r\n\r\n```json\r\n{\r\n  \"int\": \"http://typed-json.org/#integer\",\r\n  \"string\": \"http://typed-json.org/#string\",\r\n  \"color\": \"string\",\r\n  \"point\": { \"x\": \"int\", \"y\": \"int\" },\r\n  \"pixel\": {\r\n    \"0\": \"point\",\r\n    \"1\": \"color\"\r\n  }\r\n}\r\n```\r\n\r\nAbove defined `pixel` type defines structure for values like:\r\n\r\n```js\r\n[{x:0, y:0}, \"red\"]\r\n````\r\n\r\n*Note: That \"color\" is just an alias for a string with a different\r\nsemantic meaning. It's useful to give semantic meaning to an entities\r\nused in type definitions, that allows changing types of those entities\r\nindependently from computed types*\r\n\r\n\r\nTuples also be used for defining types for fixed size collections. Note\r\nthat there's no need to define types for each individual index on a tuple\r\nas definition implies that type of the lower indexed elements is same\r\nunless defineded otherwise:\r\n\r\n\r\n```json\r\n{\r\n  \"int\": \"http://typed-json.org/#integer\",\r\n  \"point\": { \"x\": \"int\", \"y\": \"int\" },\r\n  \"square\": { \"3\": \"point\" }\r\n}\r\n```\r\n\r\nAbove definition of `square` is identical to:\r\n\r\n```json\r\n{\r\n  \"int\": \"http://typed-json.org/#integer\",\r\n  \"point\": { \"x\": \"int\", \"y\": \"int\" },\r\n  \"square\": {\r\n    \"0\": \"point\",\r\n    \"1\": \"point\",\r\n    \"2\": \"point\",\r\n    \"3\": \"point\"\r\n  }\r\n}\r\n```\r\n\r\nDifferent types can also be mixed in long tuples as simple\r\nas:\r\n\r\n\r\n```json\r\n{\r\n  \"int\": \"http://typed-json.org/#integer\",\r\n  \"point\": { \"x\": \"int\", \"y\": \"int\" },\r\n  \"find-better-example\": {\r\n    \"4\": \"point\",\r\n    \"6\": \"int\",\r\n    \"8\": \"point\"\r\n  }\r\n}\r\n```\r\n\r\nAbove defitinion of `find-better-example` type defines array\r\nstructure of `9` elements where `0` to `4` indexed elements\r\nare of `point` type, `5` to `6` integers and `7` to `8` are\r\nof `point` types.\r\n\r\n\r\n## Union types\r\n\r\n## Constants\r\n\r\nConstants can be used to define types for the specific values\r\nthat can be reused in union types for example:\r\n\r\n\r\n```json\r\n{\r\n  \"int\": \"http://typed-json.org/#string\",\r\n  \"yes\": \"'yes'\",\r\n  \"no\": \"'no'\",\r\n  \"is-ready\": \"yes|no\"\r\n```\r\n\r\n# Prior art:\r\n\r\n- [Elm records](http://elm-lang.org/learn/Records.elm)\r\n- [MongoDB BSON](http://bsonspec.org/)\r\n- [JSON Schema](http://json-schema.org/)\r\n- [Protocol buffers](https://developers.google.com/protocol-buffers/docs/overview)\r\n\r\n[JSON]:http://json.org/\r\n[structural typing]:http://en.wikipedia.org/wiki/Structural_type_system\r\n","google":"UA-42944832-1","note":"Don't delete this file! It's used internally to help with page regeneration."}